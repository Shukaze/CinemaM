{"ast":null,"code":"/*import { LOGIN_SUCCESS, LOGIN_ERROR, SIGNOUT, SIGNUP_SUCCESS, SIGNUP_ERROR } from './actionTypes';\nimport Axios from 'axios';\n\nexport const signIn = (credentials) => {\n  return async (dispatch) => {\n    try {\n      const result = await Axios.post('/api/users/login', credentials)\n      dispatch({ type: LOGIN_SUCCESS, payload: result })\n    }\n    catch (error) {\n      dispatch({ type: LOGIN_ERROR, error })\n    }\n  }\n}*/\nexport default {\n  login: function login(user) {\n    return fetch('/users/login', {\n      method: \"post\",\n      body: JSON.stringify(user),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      if (res.status !== 401) return res.json().then(function (data) {\n        return data;\n      });else return {\n        isAuthenticated: false,\n        user: {\n          username: \"\",\n          role: \"\"\n        }\n      };\n    });\n  },\n  register: function register(user) {\n    return fetch('/users/register', {\n      method: \"post\",\n      body: JSON.stringify(user),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return data;\n    });\n  },\n  logout: function logout() {\n    return fetch('/users/logout').then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return data;\n    });\n  },\n  isAuthenticated: function isAuthenticated() {\n    return fetch('/users/authenticated').then(function (res) {\n      if (res.status !== 401) return res.json().then(function (data) {\n        return data;\n      });else return {\n        isAuthenticated: false,\n        user: {\n          username: \"\",\n          role: \"\"\n        }\n      };\n    });\n  }\n};\n/*\nexport const signUp = (credentials) => {\n  return async (dispatch) => {\n    try {\n      const result = await Axios.post('/api/users/signup', credentials)\n      dispatch({ type: SIGNUP_SUCCESS, payload: result })\n    }\n    catch (error) {\n      dispatch({ type: SIGNUP_ERROR, error })\n    }\n  }\n}\n\n\nexport const signOut = () => {\n  return (dispatch) => { dispatch({ type: SIGNOUT }) }\n}\n*/","map":{"version":3,"sources":["D:/iCinema-master/iCinema-master/frontend/src/actions/authAction.js"],"names":["login","user","fetch","method","body","JSON","stringify","headers","then","res","status","json","data","isAuthenticated","username","role","register","logout"],"mappings":"AAAA;;;;;;;;;;;;;;AAeA,eAAe;AACXA,EAAAA,KAAK,EAAG,eAAAC,IAAI,EAAG;AACb,WAAOC,KAAK,CAAC,cAAD,EAAiB;AAC3BC,MAAAA,MAAM,EAAG,MADkB;AAE3BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAFqB;AAG3BM,MAAAA,OAAO,EAAE;AACP,wBAAiB;AADV;AAHkB,KAAjB,CAAL,CAMJC,IANI,CAMC,UAAAC,GAAG,EAAI;AACb,UAAGA,GAAG,CAACC,MAAJ,KAAe,GAAlB,EACG,OAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgB,UAAAI,IAAI;AAAA,eAAEA,IAAF;AAAA,OAApB,CAAP,CADH,KAGE,OAAO;AAACC,QAAAA,eAAe,EAAG,KAAnB;AAA0BZ,QAAAA,IAAI,EAAG;AAACa,UAAAA,QAAQ,EAAC,EAAV;AAAcC,UAAAA,IAAI,EAAE;AAApB;AAAjC,OAAP;AACH,KAXM,CAAP;AAaD,GAfU;AAgBXC,EAAAA,QAAQ,EAAG,kBAAAf,IAAI,EAAG;AAChB,WAAOC,KAAK,CAAC,iBAAD,EAAoB;AAC9BC,MAAAA,MAAM,EAAG,MADqB;AAE9BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAFwB;AAG9BM,MAAAA,OAAO,EAAE;AACP,wBAAiB;AADV;AAHqB,KAApB,CAAL,CAMJC,IANI,CAMC,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACE,IAAJ,EAAJ;AAAA,KANJ,EAOJH,IAPI,CAOC,UAAAI,IAAI;AAAA,aAAIA,IAAJ;AAAA,KAPL,CAAP;AAQD,GAzBU;AA0BXK,EAAAA,MAAM,EAAG,kBAAK;AACZ,WAAOf,KAAK,CAAC,eAAD,CAAL,CACJM,IADI,CACC,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACE,IAAJ,EAAJ;AAAA,KADJ,EAEJH,IAFI,CAEC,UAAAI,IAAI;AAAA,aAAIA,IAAJ;AAAA,KAFL,CAAP;AAGD,GA9BU;AA+BXC,EAAAA,eAAe,EAAG,2BAAK;AACrB,WAAOX,KAAK,CAAC,sBAAD,CAAL,CACNM,IADM,CACD,UAAAC,GAAG,EAAG;AACV,UAAGA,GAAG,CAACC,MAAJ,KAAe,GAAlB,EACG,OAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgB,UAAAI,IAAI;AAAA,eAAEA,IAAF;AAAA,OAApB,CAAP,CADH,KAGE,OAAO;AAACC,QAAAA,eAAe,EAAG,KAAnB;AAA0BZ,QAAAA,IAAI,EAAG;AAACa,UAAAA,QAAQ,EAAC,EAAV;AAAcC,UAAAA,IAAI,EAAE;AAApB;AAAjC,OAAP;AACH,KANM,CAAP;AAOD;AAvCU,CAAf;AA2CA","sourcesContent":["/*import { LOGIN_SUCCESS, LOGIN_ERROR, SIGNOUT, SIGNUP_SUCCESS, SIGNUP_ERROR } from './actionTypes';\nimport Axios from 'axios';\n\nexport const signIn = (credentials) => {\n  return async (dispatch) => {\n    try {\n      const result = await Axios.post('/api/users/login', credentials)\n      dispatch({ type: LOGIN_SUCCESS, payload: result })\n    }\n    catch (error) {\n      dispatch({ type: LOGIN_ERROR, error })\n    }\n  }\n}*/\n\nexport default {\n    login : user =>{\n      return fetch('/users/login', {\n        method : \"post\",\n        body: JSON.stringify(user),\n        headers: {\n          'Content-Type' : 'application/json'\n        }\n      }).then(res => {\n        if(res.status !== 401)\n           return res.json().then(data=>data);\n        else  \n          return {isAuthenticated : false, user : {username:\"\", role: \"\"}};\n      })\n\n    },\n    register : user =>{\n      return fetch('/users/register', {\n        method : \"post\",\n        body: JSON.stringify(user),\n        headers: {\n          'Content-Type' : 'application/json'\n        }\n      }).then(res => res.json())\n        .then(data => data);\n    },\n    logout : () =>{\n      return fetch('/users/logout')\n        .then(res => res.json())\n        .then(data => data);\n    },\n    isAuthenticated : () =>{\n      return fetch('/users/authenticated')\n      .then(res =>{\n        if(res.status !== 401)\n           return res.json().then(data=>data);\n        else  \n          return {isAuthenticated : false, user : {username:\"\", role: \"\"}};\n      }); \n    }\n}\n\n\n/*\nexport const signUp = (credentials) => {\n  return async (dispatch) => {\n    try {\n      const result = await Axios.post('/api/users/signup', credentials)\n      dispatch({ type: SIGNUP_SUCCESS, payload: result })\n    }\n    catch (error) {\n      dispatch({ type: SIGNUP_ERROR, error })\n    }\n  }\n}\n\n\nexport const signOut = () => {\n  return (dispatch) => { dispatch({ type: SIGNOUT }) }\n}\n*/"]},"metadata":{},"sourceType":"module"}