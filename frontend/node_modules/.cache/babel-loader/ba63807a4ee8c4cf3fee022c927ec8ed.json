{"ast":null,"code":"import _toConsumableArray from \"D:\\\\iCinema-master\\\\iCinema-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\iCinema-master\\\\iCinema-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\iCinema-master\\\\iCinema-master\\\\frontend\\\\src\\\\Utils\\\\FileUpload.js\";\nimport React, { useState } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { icon } from 'antd';\nimport Axios from 'axios';\n\nfunction FileUpload(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      Images = _useState2[0],\n      setImages = _useState2[1];\n\n  var onDrop = function onDrop(files) {\n    var formData = new FormData();\n    var config = {\n      header: {\n        'content-type': 'multipart/form-data'\n      }\n    };\n    formData.append(\"file\", files[0]); //save the Image we chose inside the Node Server \n\n    Axios.post('/movies/addmovie', formData, config).then(function (response) {\n      if (response.data.success) {\n        setImages([].concat(_toConsumableArray(Images), [response.data.image]));\n        props.refreshFunction([].concat(_toConsumableArray(Images), [response.data.image]));\n      } else {\n        alert('Failed to save the Image in Server');\n      }\n    });\n  };\n\n  var onDelete = function onDelete(image) {\n    var currentIndex = Images.indexOf(image);\n\n    var newImages = _toConsumableArray(Images);\n\n    newImages.splice(currentIndex, 1);\n    setImages(newImages);\n    props.refreshFunction(newImages);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"fileupload\");\n}\n\nexport default FileUpload;","map":{"version":3,"sources":["D:/iCinema-master/iCinema-master/frontend/src/Utils/FileUpload.js"],"names":["React","useState","Dropzone","icon","Axios","FileUpload","props","Images","setImages","onDrop","files","formData","FormData","config","header","append","post","then","response","data","success","image","refreshFunction","alert","onDelete","currentIndex","indexOf","newImages","splice"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA,kBAEKL,QAAQ,CAAC,EAAD,CAFb;AAAA;AAAA,MAEhBM,MAFgB;AAAA,MAERC,SAFQ;;AAIvB,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AAEtB,QAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACA,QAAMC,MAAM,GAAG;AACXC,MAAAA,MAAM,EAAE;AAAE,wBAAgB;AAAlB;AADG,KAAf;AAGAH,IAAAA,QAAQ,CAACI,MAAT,CAAgB,MAAhB,EAAwBL,KAAK,CAAC,CAAD,CAA7B,EANsB,CAOtB;;AACAN,IAAAA,KAAK,CAACY,IAAN,CAAW,kBAAX,EAA+BL,QAA/B,EAAyCE,MAAzC,EACKI,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AAEvBZ,QAAAA,SAAS,8BAAKD,MAAL,IAAaW,QAAQ,CAACC,IAAT,CAAcE,KAA3B,GAAT;AACAf,QAAAA,KAAK,CAACgB,eAAN,8BAA0Bf,MAA1B,IAAkCW,QAAQ,CAACC,IAAT,CAAcE,KAAhD;AAEH,OALD,MAKO;AACHE,QAAAA,KAAK,CAAC,oCAAD,CAAL;AACH;AACJ,KAVL;AAWH,GAnBD;;AAsBA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACH,KAAD,EAAW;AACxB,QAAMI,YAAY,GAAGlB,MAAM,CAACmB,OAAP,CAAeL,KAAf,CAArB;;AAEA,QAAIM,SAAS,sBAAOpB,MAAP,CAAb;;AACAoB,IAAAA,SAAS,CAACC,MAAV,CAAiBH,YAAjB,EAA+B,CAA/B;AAEAjB,IAAAA,SAAS,CAACmB,SAAD,CAAT;AACArB,IAAAA,KAAK,CAACgB,eAAN,CAAsBK,SAAtB;AACH,GARD;;AAUA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAMH;;AAED,eAAetB,UAAf","sourcesContent":["import React, { useState } from 'react'\nimport Dropzone from 'react-dropzone';\nimport { icon } from 'antd';\nimport Axios from 'axios';\nfunction FileUpload(props) {\n\n    const [Images, setImages] = useState([])\n\n    const onDrop = (files) => {\n\n        let formData = new FormData();\n        const config = {\n            header: { 'content-type': 'multipart/form-data' }\n        }\n        formData.append(\"file\", files[0])\n        //save the Image we chose inside the Node Server \n        Axios.post('/movies/addmovie', formData, config)\n            .then(response => {\n                if (response.data.success) {\n\n                    setImages([...Images, response.data.image])\n                    props.refreshFunction([...Images, response.data.image])\n\n                } else {\n                    alert('Failed to save the Image in Server')\n                }\n            })\n    }\n\n\n    const onDelete = (image) => {\n        const currentIndex = Images.indexOf(image);\n\n        let newImages = [...Images]\n        newImages.splice(currentIndex, 1)\n\n        setImages(newImages)\n        props.refreshFunction(newImages)\n    }\n\n    return (\n        <div >\n            fileupload\n\n        </div>\n    )\n}\n\nexport default FileUpload\n"]},"metadata":{},"sourceType":"module"}