{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Margo\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Margo\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Axios from \"axios\";\nimport { GET_MOVIES_SUCCESS, GET_MOVIES_ERROR, ADD_MOVIE_SUCCESS, ADD_MOVIE_ERROR } from './types';\nexport var getMovies = function getMovies() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Axios.get('/api/movies');\n\n            case 3:\n              result = _context.sent;\n              dispatch({\n                type: GET_MOVIES_SUCCESS,\n                payload: result.data.movies\n              });\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: GET_MOVIES_ERROR,\n                error: _context.t0\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var addMovie = function addMovie(movie) {\n  var contentType = {\n    headers: {\n      \"content-type\": \"multipart/form-data\"\n    }\n  };\n  var formData = new FormData();\n  formData.append(\"title\", movie.title);\n  formData.append(\"numberInStock\", movie.numberInStock);\n  formData.append(\"genre\", movie.genre);\n  formData.append(\"image\", movie.image);\n  formData.append(\"rate\", movie.rate);\n  formData.append(\"trailerLink\", movie.trailerLink);\n  formData.append(\"movieLength\", movie.movieLength);\n  formData.append(\"description\", movie.description);\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return Axios.post('/movies/addmovie', formData, contentType);\n\n            case 3:\n              result = _context2.sent;\n              dispatch({\n                type: ADD_MOVIE_SUCCESS,\n                payload: result.data.movies\n              });\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              dispatch({\n                type: ADD_MOVIE_ERROR,\n                error: _context2.t0\n              });\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["D:/Margo/frontend/src/actions/moviesAction.js"],"names":["Axios","GET_MOVIES_SUCCESS","GET_MOVIES_ERROR","ADD_MOVIE_SUCCESS","ADD_MOVIE_ERROR","getMovies","dispatch","get","result","type","payload","data","movies","error","addMovie","movie","contentType","headers","formData","FormData","append","title","numberInStock","genre","image","rate","trailerLink","movieLength","description","post"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,EAA8CC,iBAA9C,EAAgEC,eAAhE,QAAuF,SAAvF;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B;AAAA,wEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEkBN,KAAK,CAACO,GAAN,CAAU,aAAV,CAFlB;;AAAA;AAEGC,cAAAA,MAFH;AAGHF,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAER,kBAAR;AAA4BS,gBAAAA,OAAO,EAAEF,MAAM,CAACG,IAAP,CAAYC;AAAjD,eAAD,CAAR;AAHG;AAAA;;AAAA;AAAA;AAAA;AAMHN,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAEP,gBAAR;AAA0BW,gBAAAA,KAAK;AAA/B,eAAD,CAAR;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AASD,CAVM;AAYP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AACjC,MAAMC,WAAW,GAAG;AAClBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADS,GAApB;AAKA,MAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBL,KAAK,CAACM,KAA/B;AACAH,EAAAA,QAAQ,CAACE,MAAT,CAAgB,eAAhB,EAAiCL,KAAK,CAACO,aAAvC;AACAJ,EAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBL,KAAK,CAACQ,KAA/B;AACAL,EAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBL,KAAK,CAACS,KAA/B;AACAN,EAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBL,KAAK,CAACU,IAA9B;AACAP,EAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+BL,KAAK,CAACW,WAArC;AACAR,EAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+BL,KAAK,CAACY,WAArC;AACAT,EAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+BL,KAAK,CAACa,WAArC;AAEA;AAAA,yEAAO,kBAAOtB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEmBN,KAAK,CAAC6B,IAAN,CAAW,kBAAX,EAA+BX,QAA/B,EAAyCF,WAAzC,CAFnB;;AAAA;AAEGR,cAAAA,MAFH;AAGHF,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAEN,iBAAR;AAA2BO,gBAAAA,OAAO,EAAEF,MAAM,CAACG,IAAP,CAAYC;AAAhD,eAAD,CAAR;AAHG;AAAA;;AAAA;AAAA;AAAA;AAMHN,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAEL,eAAR;AAAyBS,gBAAAA,KAAK;AAA9B,eAAD,CAAR;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AASD,CAzBM","sourcesContent":["import Axios from \"axios\";\nimport { GET_MOVIES_SUCCESS, GET_MOVIES_ERROR,ADD_MOVIE_SUCCESS,ADD_MOVIE_ERROR } from './types';\n\nexport const getMovies = () => {\n  return async (dispatch) => {\n    try {\n      const result = await Axios.get('/api/movies');\n      dispatch({ type: GET_MOVIES_SUCCESS, payload: result.data.movies }) \n    } \n    catch (error) {\n      dispatch({ type: GET_MOVIES_ERROR, error })\n    }\n  }\n}\n\nexport const addMovie = (movie) => {\n  const contentType = {\n    headers: {\n      \"content-type\": \"multipart/form-data\"\n    }\n  }\n  let formData = new FormData();\n  formData.append(\"title\", movie.title);\n  formData.append(\"numberInStock\", movie.numberInStock);\n  formData.append(\"genre\", movie.genre);\n  formData.append(\"image\", movie.image);\n  formData.append(\"rate\", movie.rate);\n  formData.append(\"trailerLink\", movie.trailerLink);\n  formData.append(\"movieLength\", movie.movieLength);\n  formData.append(\"description\", movie.description);\n    \n  return async (dispatch) => {\n    try {\n      const result =  await Axios.post('/movies/addmovie', formData, contentType);\n      dispatch({ type: ADD_MOVIE_SUCCESS, payload: result.data.movies });\n    }\n    catch (error) {\n      dispatch({ type: ADD_MOVIE_ERROR, error });\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}